omg: 1
lifecycle:
  startup:
    command: ["minio"]
info:
  version: 1.0.0
  title: Minio 
  description: This is a Minio service
  contact:
    name: RohitS
    url: https://github.com/ht68rohit
    email: rohits@heptrace.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT 
actions:
  makebucket:
    help: Create a New Bucket
    http:
      port: 5000
      method: post
      path: /makebucket
      contentType: application/json
    arguments:
      name:
        type: string
        in: requestBody
        required: true
        pattern: ^[a-z0-9]+(-[a-z0-9]+)*$
        help: Name of the bucket
      location: 
        type: string
        in: requestBody
        required: true
        help: Region where the bucket is to be created
    output: 
      type: string
  bucketlist:
    help: List all buckets
    http: 
      port: 5000
      method: get
      path: /getbucketlist
    output:
      contentType: application/json
      type: list
  bucketexists: 
    help: Checks if a bucket exists
    http: 
      port: 5000
      method: post
      path: /bucketexists
      contentType: application/json
    arguments:
      name:
        type: string
        in: requestBody
        required: true
        pattern: ^[a-z0-9]+(-[a-z0-9]+)*$
        help: Check for bucket existence
    output:
      type: string
  removebucket:   
    help: Removes a bucket, bucket should be empty to be successfully removed
    http: 
      port: 5000
      method: put
      path: /removebucket
      contentType: application/json
    arguments:
      name:
        type: string
        in: requestBody
        pattern: ^[a-z0-9]+(-[a-z0-9]+)*$
        help: Bucket Name which is to be removed
    output:
      type: string
  objectlist: 
    help: Lists objects in a bucket
    http: 
      port: 5000
      method: post
      path: /getobjectlist
      contentType: application/json
    arguments:
      name:
        type: string
        in: requestBody
        required: true
        help: Name of the bucket
      objectprefix:
        type: string
        in: requestBody
        required: true
        help: Prefix of objects to be listed
      recursive:
        type: boolean
        in: requestBody
        required: true
        help: Listing type(true indicates recursive style listing and false indicates directory style listing delimited by '/'.)
    output:
      contentType: application/json
      type: object
  getobject: 
    help: Returns a stream of the object data
    http: 
      port: 5000
      method: post
      path: /getobject
      contentType: application/json
    arguments:
      name:
        type: string
        in: requestBody
        required: true
        pattern: ^[a-z0-9]+(-[a-z0-9]+)*$
      objectname:
        type: string
        in: requestBody
        required: true
    output:
      type: string
  putobject: 
    help: Returns a stream of the object data
    http: 
      port: 5000
      method: put
      path: /putobject
      contentType: application/json
    arguments:
      # bucketid:
      #   type: string
      #   in: path
      #   required: true
      name:
        type: string
        in: requestBody
        required: true
        pattern: ^[a-z0-9]+(-[a-z0-9]+)*$
      objectname:
        type: string
        in: requestBody
        required: true
      filename:
        type: string
        in: requestBody
        required: true
      # opts:
      #   type: object
      #   in: requestBody
      #   required: true
    output:
      type: string  
  copyobject: 
    help: Create or replace an object through server-side copying of an existing object
    http:
      port: 5000
      method: post
      path: /copyobject
      contentType: application/json
    arguments:
      srcbucketname:
        type: string
        in: requestBody
        required: true
      srcobjectname:
        type: string
        in: requestBody
        required: true
      dstbucketname:
        type: string
        in: requestBody
        required: true
      dstobjectname:
        type: string
        in: requestBody
        required: true
    output:
      type: string
  removeobject: 
    help: Removes an object.
    http:
      port: 5000
      method: put
      path: /removeobject
      contentType: application/json
    arguments:
      name:
        type: string
        in: requestBody
        required: true
        pattern: ^[a-z0-9]+(-[a-z0-9]+)*$
      objectname:
        type: string
        in: requestBody
        required: true
    output:
      type: string
  statobject:
    help: Fetch metadata of an object.
    http:
      port: 5000
      method: post
      path: /statobject
      contentType: application/json
    arguments:
      name:
        type: string
        in: requestBody
        required: true
        pattern: ^[a-z0-9]+(-[a-z0-9]+)*$
      objectname:
        type: string
        in: requestBody
        required: true
    output:
      contentType: application/json
      type: object
environment:
  endpoint:
    type: string
    required: true
    #pattern: ^[a-zA-Z0-9_]*$
    help: object storage endpoint.
  accessKeyID:
    type: string
    required: true
    pattern: ^[a-zA-Z0-9_]*$
    help: access key for  object storage
  secretAccessKey:
    type: string
    required: true
    #pattern: ^[a-zA-Z0-9_]*$
    help: secret key for  object storage
    
    