omg: 1
lifecycle:
  startup:
    command: ["minio"]
info:
  version: 1.0.0
  title: Minio 
  description: This is a Minio service
  contact:
    name: Rohit Shetty
    url: https://github.com/heaptracetechnology/minio
    email: rohits@heptrace.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT 
actions:
  makebucket:
    help: Create a New Bucket
    http:
      port: 5000
      method: post
      path: /makebucket
      contentType: application/json
    arguments:
      name:
        type: string
        in: requestBody
        required: true
        pattern: ^[a-z0-9]+(-[a-z0-9]+)*$
        help: Name of the bucket
      location: 
        type: string
        in: requestBody
        required: true
        help: Region where the bucket is to be created
    output: 
      type: object
      properties:
        message:
          help: return the success message with bucket name if make bucket succes otherwise return errors message
          type: string
        success:
          help: return true on succes and false on not found bucket
          type: boolean
  listbuckets:
    help: List all buckets
    http:
      port: 5000
      method: get
      path: /getbucketlist
    output:
      contentType: application/json
      type: list
      properties:
        name:
          help: in the list object return the name of bucket
          type: string
        creationdate:
          help: in the list object return the bucket creation date
          type: string
  existsbucket: 
    help: Checks if a bucket exists
    http: 
      port: 5000
      method: post
      path: /bucketexists
      contentType: application/json
    arguments:
      name:
        type: string
        in: requestBody
        required: true
        pattern: ^[a-z0-9]+(-[a-z0-9]+)*$
        help: Check for bucket existence
    output:
      type: object
      properties:
        message:
          help: retun the bucket found if present the bucket otherwise return not found message
          type: string
        success:
          help: return true on succes and false on not found bucket
          type: boolean
  statobject:
    help: Fetch metadata of an object.
    http:
      port: 5000
      method: post
      path: /statobject
      contentType: application/json
    arguments:
      name:
        type: string
        in: requestBody
        required: true
        pattern: ^[a-z0-9]+(-[a-z0-9]+)*$
      objectname:
        type: string
        in: requestBody
        required: true
    output:
      contentType: application/json
      type: object
      properties:
        name:
          help: name of the object
          type: string
        lastmodified:
          help: object lat updated date
          type: string
        size:
          help: size of the object
          type: number
        metadata:
          help: detail metadata of the object 
          type: object
        owner:
          help: owner detail with name and id
          type: object
  listobjects: 
    help: Lists objects in a bucket
    http: 
      port: 5000
      method: post
      path: /getobjectlist
      contentType: application/json
    arguments:
      name:
        type: string
        in: requestBody
        required: true
        help: Name of the bucket
      objectprefix:
        type: string
        in: requestBody
        help: Prefix of objects to be listed
      recursive:
        type: boolean
        in: requestBody
        required: true
        help: Listing type(true indicates recursive style listing and false indicates directory style listing delimited by '/'.)
    output:
      contentType: application/json
      type: string
  getobject: 
    help: Returns a stream of the object data
    http: 
      port: 5000
      method: post
      path: /getobject
      contentType: application/json
    arguments:
      name:
        type: string
        in: requestBody
        required: true
        pattern: ^[a-z0-9]+(-[a-z0-9]+)*$
      objectname:
        type: string
        in: requestBody
        required: true
    output:
      type: object
  putobject: 
    help: Returns a stream of the object data
    http: 
      port: 5000
      method: put
      path: /putobject
      contentType: application/json
    arguments:
      name:
        type: string
        in: requestBody
        required: true
        pattern: ^[a-z0-9]+(-[a-z0-9]+)*$
      objectname:
        type: string
        in: requestBody
        required: true
      filename:
        type: string
        in: requestBody
        required: true
    output:
      type: object
      properties:
        message:
          help: message return update success if success otherwise return error message
          type: string
        success:
          help: return true on succes and false on fail update object
          type: boolean 
  copyobject: 
    help: Create or replace an object through server-side copying of an existing object
    http:
      port: 5000
      method: post
      path: /copyobject
      contentType: application/json
    arguments:
      srcbucketname:
        type: string
        in: requestBody
        required: true
      srcobjectname:
        type: string
        in: requestBody
        required: true
      dstbucketname:
        type: string
        in: requestBody
        required: true
      dstobjectname:
        type: string
        in: requestBody
        required: true
    output:
      type: object
      properties:
        message:
          help: message return copy success if success otherwise return error message
          type: string
        success:
          help: return true on succes and false on copy object
          type: boolean
  getbucketpolicy:
    help: Get access permissions on a bucket or a prefix
    http:
      port: 5000
      method: post
      path: /getbucketpolicy
      contentType: application/json
    arguments:
      name:
        type: string
        in: requestBody
        required: true
        pattern: ^[a-z0-9]+(-[a-z0-9]+)*$
    output:
      type: object
      properties: 
        version:
          help: getting the verion detail.
          type: string
        statement: 
          help: getting the list of statement object with effect, principal, action, resource, condition 
          type: list
  
  fputobject:
    help: Uploads contents from a file to objectName
    http: 
      port: 5000
      method: put
      path: /fputobject
      contentType: application/json
    arguments:
      name:
        type: string
        in: requestBody
        required: true
        pattern: ^[a-z0-9]+(-[a-z0-9]+)*$
      objectname:
        type: string
        in: requestBody
        required: true
      filepath:
        type: string
        in: requestBody
        required: true
    output:
      type: object
      properties: 
        message:
          help: return message on update
          type: string
        success: 
          help: return success true or false 
          type: list
environment:
  END_POINT:
    type: string
    required: true
    help: object storage endpoint.
  ACCESS_KEY_ID:
    type: string
    required: true
    pattern: ^[a-zA-Z0-9_]*$
    help: access key for  object storage
  SECRET_ACCESS_KEY:
    type: string
    required: true
    help: secret key for  object storage
    
    